/* tslint:disable */
/* eslint-disable */
/**
 * Agora by ZKorum
 * Agora by ZKorum API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost200Response
 */
export interface ApiV1AuthAuthenticatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePostRequest
 */
export interface ApiV1AuthAuthenticatePostRequest {
    /**
     * Email address
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthCheckLoginStatusPost409Response
 */
export interface ApiV1AuthCheckLoginStatusPost409Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthCheckLoginStatusPost409Response
     */
    'reason': ApiV1AuthCheckLoginStatusPost409ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthCheckLoginStatusPost409Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthCheckLoginStatusPost409Response
     */
    'sessionExpiry': string;
}

export const ApiV1AuthCheckLoginStatusPost409ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in'
} as const;

export type ApiV1AuthCheckLoginStatusPost409ResponseReasonEnum = typeof ApiV1AuthCheckLoginStatusPost409ResponseReasonEnum[keyof typeof ApiV1AuthCheckLoginStatusPost409ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200Response
 */
export interface ApiV1AuthVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'sessionExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200Response
     */
    'reason': ApiV1AuthVerifyOtpPost200ResponseReasonEnum;
}

export const ApiV1AuthVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type ApiV1AuthVerifyOtpPost200ResponseReasonEnum = typeof ApiV1AuthVerifyOtpPost200ResponseReasonEnum[keyof typeof ApiV1AuthVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200ResponseAnyOf
 */
export interface ApiV1AuthVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf
     */
    'sessionExpiry': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPost200ResponseAnyOf1
 */
export interface ApiV1AuthVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthVerifyOtpPost200ResponseAnyOf1
     */
    'reason': ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess'
} as const;

export type ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthVerifyOtpPostRequest
 */
export interface ApiV1AuthVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthVerifyOtpPostRequest
     */
    'code': number;
}
/**
 * 
 * @export
 * @interface ApiV1CommentCreatePost200Response
 */
export interface ApiV1CommentCreatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentCreatePost200Response
     */
    'commentSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1CommentCreatePostRequest
 */
export interface ApiV1CommentCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentCreatePostRequest
     */
    'postSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentCreatePostRequest
     */
    'commentBody': string;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchPost200ResponseInner
 */
export interface ApiV1CommentFetchPost200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'commentSlugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'comment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'numLikes': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1CommentFetchPost200ResponseInner
     */
    'numDislikes': number;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchPostRequest
 */
export interface ApiV1CommentFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPostRequest
     */
    'postSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchPostRequest
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchToVoteOnPost200Response
 */
export interface ApiV1CommentFetchToVoteOnPost200Response {
    /**
     * 
     * @type {Array<ApiV1CommentFetchPost200ResponseInner>}
     * @memberof ApiV1CommentFetchToVoteOnPost200Response
     */
    'assignedComments': Array<ApiV1CommentFetchPost200ResponseInner>;
}
/**
 * 
 * @export
 * @interface ApiV1CommentFetchToVoteOnPostRequest
 */
export interface ApiV1CommentFetchToVoteOnPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1CommentFetchToVoteOnPostRequest
     */
    'postSlugId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1CommentFetchToVoteOnPostRequest
     */
    'numberOfCommentsToFetch': number;
}
/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePost200ResponseInner
 */
export interface ApiV1FeedFetchMorePost200ResponseInner {
    /**
     * 
     * @type {ApiV1FeedFetchMorePost200ResponseInnerMetadata}
     * @memberof ApiV1FeedFetchMorePost200ResponseInner
     */
    'metadata': ApiV1FeedFetchMorePost200ResponseInnerMetadata;
    /**
     * 
     * @type {ApiV1FeedFetchMorePost200ResponseInnerPayload}
     * @memberof ApiV1FeedFetchMorePost200ResponseInner
     */
    'payload': ApiV1FeedFetchMorePost200ResponseInnerPayload;
}
/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePost200ResponseInnerMetadata
 */
export interface ApiV1FeedFetchMorePost200ResponseInnerMetadata {
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'postSlugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'lastReactedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'commentCount': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'authorName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerMetadata
     */
    'authorImagePath'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePost200ResponseInnerPayload
 */
export interface ApiV1FeedFetchMorePost200ResponseInnerPayload {
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayload
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayload
     */
    'body'?: string;
    /**
     * 
     * @type {Array<ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner>}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayload
     */
    'poll'?: Array<ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner>;
}
/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner
 */
export interface ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner {
    /**
     * 
     * @type {number}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner
     */
    'optionNumber': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner
     */
    'optionTitle': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1FeedFetchMorePost200ResponseInnerPayloadPollInner
     */
    'numResponses': number;
}
/**
 * 
 * @export
 * @interface ApiV1FeedFetchMorePostRequest
 */
export interface ApiV1FeedFetchMorePostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1FeedFetchMorePostRequest
     */
    'showHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FeedFetchMorePostRequest
     */
    'lastReactedAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PollGetUserPollResponsePost200Response
 */
export interface ApiV1PollGetUserPollResponsePost200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollGetUserPollResponsePost200Response
     */
    'selectedPollOption'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1PollGetUserPollResponsePostRequest
 */
export interface ApiV1PollGetUserPollResponsePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollGetUserPollResponsePostRequest
     */
    'postSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1PollSubmitResponsePostRequest
 */
export interface ApiV1PollSubmitResponsePostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollSubmitResponsePostRequest
     */
    'voteOptionChoice': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollSubmitResponsePostRequest
     */
    'postSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1PostCreatePostRequest
 */
export interface ApiV1PostCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequest
     */
    'postTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostCreatePostRequest
     */
    'postBody'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1PostCreatePostRequest
     */
    'pollingOptionList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPost200Response
 */
export interface ApiV1PostFetchPost200Response {
    /**
     * 
     * @type {ApiV1FeedFetchMorePost200ResponseInner}
     * @memberof ApiV1PostFetchPost200Response
     */
    'postData': ApiV1FeedFetchMorePost200ResponseInner;
}
/**
 * 
 * @export
 * @interface ApiV1PostFetchPostRequest
 */
export interface ApiV1PostFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PostFetchPostRequest
     */
    'postSlugId': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost: async (apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthAuthenticatePostRequest' is not null or undefined
            assertParamExists('apiV1AuthAuthenticatePost', 'apiV1AuthAuthenticatePostRequest', apiV1AuthAuthenticatePostRequest)
            const localVarPath = `/api/v1/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckLoginStatusPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/check-login-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthVerifyOtpPost: async (apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthVerifyOtpPostRequest' is not null or undefined
            assertParamExists('apiV1AuthVerifyOtpPost', 'apiV1AuthVerifyOtpPostRequest', apiV1AuthVerifyOtpPostRequest)
            const localVarPath = `/api/v1/auth/verifyOtp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentCreatePost: async (apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentCreatePostRequest' is not null or undefined
            assertParamExists('apiV1CommentCreatePost', 'apiV1CommentCreatePostRequest', apiV1CommentCreatePostRequest)
            const localVarPath = `/api/v1/comment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentFetchPostRequest} apiV1CommentFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchPost: async (apiV1CommentFetchPostRequest: ApiV1CommentFetchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentFetchPostRequest' is not null or undefined
            assertParamExists('apiV1CommentFetchPost', 'apiV1CommentFetchPostRequest', apiV1CommentFetchPostRequest)
            const localVarPath = `/api/v1/comment/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentFetchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1CommentFetchToVoteOnPostRequest} apiV1CommentFetchToVoteOnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchToVoteOnPost: async (apiV1CommentFetchToVoteOnPostRequest: ApiV1CommentFetchToVoteOnPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CommentFetchToVoteOnPostRequest' is not null or undefined
            assertParamExists('apiV1CommentFetchToVoteOnPost', 'apiV1CommentFetchToVoteOnPostRequest', apiV1CommentFetchToVoteOnPostRequest)
            const localVarPath = `/api/v1/comment/fetchToVoteOn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CommentFetchToVoteOnPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchMorePost: async (apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FeedFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1FeedFetchMorePost', 'apiV1FeedFetchMorePostRequest', apiV1FeedFetchMorePostRequest)
            const localVarPath = `/api/v1/feed/fetchMore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FeedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchRecentPost: async (apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FeedFetchMorePostRequest' is not null or undefined
            assertParamExists('apiV1FeedFetchRecentPost', 'apiV1FeedFetchMorePostRequest', apiV1FeedFetchMorePostRequest)
            const localVarPath = `/api/v1/feed/fetchRecent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FeedFetchMorePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PollGetUserPollResponsePostRequest} apiV1PollGetUserPollResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollGetUserPollResponsePost: async (apiV1PollGetUserPollResponsePostRequest: ApiV1PollGetUserPollResponsePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PollGetUserPollResponsePostRequest' is not null or undefined
            assertParamExists('apiV1PollGetUserPollResponsePost', 'apiV1PollGetUserPollResponsePostRequest', apiV1PollGetUserPollResponsePostRequest)
            const localVarPath = `/api/v1/poll/get-user-poll-response`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PollGetUserPollResponsePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PollSubmitResponsePostRequest} apiV1PollSubmitResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollSubmitResponsePost: async (apiV1PollSubmitResponsePostRequest: ApiV1PollSubmitResponsePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PollSubmitResponsePostRequest' is not null or undefined
            assertParamExists('apiV1PollSubmitResponsePost', 'apiV1PollSubmitResponsePostRequest', apiV1PollSubmitResponsePostRequest)
            const localVarPath = `/api/v1/poll/submitResponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PollSubmitResponsePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostCreatePost: async (apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PostCreatePostRequest' is not null or undefined
            assertParamExists('apiV1PostCreatePost', 'apiV1PostCreatePostRequest', apiV1PostCreatePostRequest)
            const localVarPath = `/api/v1/post/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostFetchPost: async (apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PostFetchPostRequest' is not null or undefined
            assertParamExists('apiV1PostFetchPost', 'apiV1PostFetchPostRequest', apiV1PostFetchPostRequest)
            const localVarPath = `/api/v1/post/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PostFetchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAuthenticatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthCheckLoginStatusPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthCheckLoginStatusPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthCheckLoginStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthVerifyOtpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CommentCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1CommentCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1CommentFetchPostRequest} apiV1CommentFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentFetchPost(apiV1CommentFetchPostRequest: ApiV1CommentFetchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1CommentFetchPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentFetchPost(apiV1CommentFetchPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1CommentFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1CommentFetchToVoteOnPostRequest} apiV1CommentFetchToVoteOnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest: ApiV1CommentFetchToVoteOnPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1CommentFetchToVoteOnPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1CommentFetchToVoteOnPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1FeedFetchMorePost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FeedFetchMorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1FeedFetchMorePost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FeedFetchRecentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PollGetUserPollResponsePostRequest} apiV1PollGetUserPollResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest: ApiV1PollGetUserPollResponsePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PollGetUserPollResponsePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PollGetUserPollResponsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PollSubmitResponsePostRequest} apiV1PollSubmitResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest: ApiV1PollSubmitResponsePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PollSubmitResponsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PollGetUserPollResponsePostRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostCreatePost(apiV1PostCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PostCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PostFetchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostFetchPost(apiV1PostFetchPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PostFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: any): AxiosPromise<ApiV1AuthAuthenticatePost200Response> {
            return localVarFp.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckLoginStatusPost(options?: any): AxiosPromise<object> {
            return localVarFp.apiV1AuthCheckLoginStatusPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: any): AxiosPromise<ApiV1AuthVerifyOtpPost200Response> {
            return localVarFp.apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: any): AxiosPromise<ApiV1CommentCreatePost200Response> {
            return localVarFp.apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentFetchPostRequest} apiV1CommentFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchPost(apiV1CommentFetchPostRequest: ApiV1CommentFetchPostRequest, options?: any): AxiosPromise<Array<ApiV1CommentFetchPost200ResponseInner>> {
            return localVarFp.apiV1CommentFetchPost(apiV1CommentFetchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1CommentFetchToVoteOnPostRequest} apiV1CommentFetchToVoteOnPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest: ApiV1CommentFetchToVoteOnPostRequest, options?: any): AxiosPromise<ApiV1CommentFetchToVoteOnPost200Response> {
            return localVarFp.apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<ApiV1FeedFetchMorePost200ResponseInner>> {
            return localVarFp.apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: any): AxiosPromise<Array<ApiV1FeedFetchMorePost200ResponseInner>> {
            return localVarFp.apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PollGetUserPollResponsePostRequest} apiV1PollGetUserPollResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest: ApiV1PollGetUserPollResponsePostRequest, options?: any): AxiosPromise<ApiV1PollGetUserPollResponsePost200Response> {
            return localVarFp.apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PollSubmitResponsePostRequest} apiV1PollSubmitResponsePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest: ApiV1PollSubmitResponsePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: any): AxiosPromise<ApiV1PollGetUserPollResponsePostRequest> {
            return localVarFp.apiV1PostCreatePost(apiV1PostCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: any): AxiosPromise<ApiV1PostFetchPost200Response> {
            return localVarFp.apiV1PostFetchPost(apiV1PostFetchPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthCheckLoginStatusPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthCheckLoginStatusPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AuthVerifyOtpPostRequest} apiV1AuthVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest: ApiV1AuthVerifyOtpPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthVerifyOtpPost(apiV1AuthVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentCreatePostRequest} apiV1CommentCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentCreatePost(apiV1CommentCreatePostRequest: ApiV1CommentCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentCreatePost(apiV1CommentCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentFetchPostRequest} apiV1CommentFetchPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentFetchPost(apiV1CommentFetchPostRequest: ApiV1CommentFetchPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentFetchPost(apiV1CommentFetchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1CommentFetchToVoteOnPostRequest} apiV1CommentFetchToVoteOnPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest: ApiV1CommentFetchToVoteOnPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1CommentFetchToVoteOnPost(apiV1CommentFetchToVoteOnPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FeedFetchMorePost(apiV1FeedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1FeedFetchMorePostRequest} apiV1FeedFetchMorePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest: ApiV1FeedFetchMorePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FeedFetchRecentPost(apiV1FeedFetchMorePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PollGetUserPollResponsePostRequest} apiV1PollGetUserPollResponsePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest: ApiV1PollGetUserPollResponsePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PollGetUserPollResponsePost(apiV1PollGetUserPollResponsePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PollSubmitResponsePostRequest} apiV1PollSubmitResponsePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest: ApiV1PollSubmitResponsePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PollSubmitResponsePost(apiV1PollSubmitResponsePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PostCreatePostRequest} apiV1PostCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostCreatePost(apiV1PostCreatePostRequest: ApiV1PostCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostCreatePost(apiV1PostCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PostFetchPostRequest} apiV1PostFetchPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PostFetchPost(apiV1PostFetchPostRequest: ApiV1PostFetchPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PostFetchPost(apiV1PostFetchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



