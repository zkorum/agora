/* tslint:disable */
/* eslint-disable */
/**
 * Agora Citizen Network
 * Agora API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest
 */
export interface ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest
     */
    'organizationName': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdministratorOrganizationCreateOrganizationPostRequest
 */
export interface ApiV1AdministratorOrganizationCreateOrganizationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationCreateOrganizationPostRequest
     */
    'organizationName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationCreateOrganizationPostRequest
     */
    'imagePath': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdministratorOrganizationCreateOrganizationPostRequest
     */
    'isFullImagePath': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationCreateOrganizationPostRequest
     */
    'websiteUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationCreateOrganizationPostRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdministratorOrganizationDeleteOrganizationPostRequest
 */
export interface ApiV1AdministratorOrganizationDeleteOrganizationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdministratorOrganizationDeleteOrganizationPostRequest
     */
    'organizationName': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdministratorOrganizationGetAllOrganizationsPost200Response
 */
export interface ApiV1AdministratorOrganizationGetAllOrganizationsPost200Response {
    /**
     * 
     * @type {Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization>}
     * @memberof ApiV1AdministratorOrganizationGetAllOrganizationsPost200Response
     */
    'organizationList': Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization>;
}
/**
 * 
 * @export
 * @interface ApiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost200Response
 */
export interface ApiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost200Response
     */
    'organizationNameList': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost200Response
 */
export interface ApiV1AuthAuthenticatePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'nextCodeSoonestTime': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200Response
     */
    'reason': ApiV1AuthAuthenticatePost200ResponseReasonEnum;
}

export const ApiV1AuthAuthenticatePost200ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user',
    Throttled: 'throttled',
    InvalidPhoneNumber: 'invalid_phone_number',
    RestrictedPhoneType: 'restricted_phone_type'
} as const;

export type ApiV1AuthAuthenticatePost200ResponseReasonEnum = typeof ApiV1AuthAuthenticatePost200ResponseReasonEnum[keyof typeof ApiV1AuthAuthenticatePost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost200ResponseAnyOf
 */
export interface ApiV1AuthAuthenticatePost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200ResponseAnyOf
     */
    'codeExpiry': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200ResponseAnyOf
     */
    'nextCodeSoonestTime': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePost200ResponseAnyOf1
 */
export interface ApiV1AuthAuthenticatePost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePost200ResponseAnyOf1
     */
    'reason': ApiV1AuthAuthenticatePost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1AuthAuthenticatePost200ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user',
    Throttled: 'throttled',
    InvalidPhoneNumber: 'invalid_phone_number',
    RestrictedPhoneType: 'restricted_phone_type'
} as const;

export type ApiV1AuthAuthenticatePost200ResponseAnyOf1ReasonEnum = typeof ApiV1AuthAuthenticatePost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthAuthenticatePost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthAuthenticatePostRequest
 */
export interface ApiV1AuthAuthenticatePostRequest {
    /**
     * Phone number
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'defaultCallingCode': ApiV1AuthAuthenticatePostRequestDefaultCallingCodeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthAuthenticatePostRequest
     */
    'isRequestingNewCode': boolean;
}

export const ApiV1AuthAuthenticatePostRequestDefaultCallingCodeEnum = {
    _297: '297',
    _5993: '5993',
    _1: '1',
    _299: '299',
    _590: '590',
    _596: '596',
    _599: '599',
    _5902: '590',
    _5903: '590',
    _508: '508',
    _1721: '1721',
    _12: '1',
    _1284: '1284',
    _1340: '1340',
    _374: '374',
    _995: '995',
    _972: '972',
    _81: '81',
    _82: '82',
    _65: '65',
    _886: '886',
    _35818: '35818',
    _355: '355',
    _376: '376',
    _43: '43',
    _375: '375',
    _32: '32',
    _387: '387',
    _359: '359',
    _385: '385',
    _420: '420',
    _45: '45',
    _372: '372',
    _298: '298',
    _358: '358',
    _33: '33',
    _49: '49',
    _350: '350',
    _30: '30',
    _441481: '441481',
    _3906698: '3906698',
    _36: '36',
    _354: '354',
    _353: '353',
    _441624: '441624',
    _39: '39',
    _441534: '441534',
    _383: '383',
    _371: '371',
    _423: '423',
    _370: '370',
    _352: '352',
    _356: '356',
    _373: '373',
    _377: '377',
    _382: '382',
    _31: '31',
    _389: '389',
    _47: '47',
    _48: '48',
    _351: '351',
    _40: '40',
    _378: '378',
    _381: '381',
    _421: '421',
    _386: '386',
    _34: '34',
    _4779: '4779',
    _46: '46',
    _41: '41',
    _90: '90',
    _380: '380',
    _44: '44',
    _38: '38',
    _262: '262',
    _1684: '1684',
    _61: '61',
    _5999: '5999',
    _689: '689',
    _687: '687',
    _64: '64'
} as const;

export type ApiV1AuthAuthenticatePostRequestDefaultCallingCodeEnum = typeof ApiV1AuthAuthenticatePostRequestDefaultCallingCodeEnum[keyof typeof ApiV1AuthAuthenticatePostRequestDefaultCallingCodeEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthCheckLoginStatusPost200Response
 */
export interface ApiV1AuthCheckLoginStatusPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthCheckLoginStatusPost200Response
     */
    'loggedInStatus': ApiV1AuthCheckLoginStatusPost200ResponseLoggedInStatusEnum;
}

export const ApiV1AuthCheckLoginStatusPost200ResponseLoggedInStatusEnum = {
    LoggedIn: 'logged_in',
    Unknown: 'unknown',
    Unverified: 'unverified',
    LoggedOut: 'logged_out'
} as const;

export type ApiV1AuthCheckLoginStatusPost200ResponseLoggedInStatusEnum = typeof ApiV1AuthCheckLoginStatusPost200ResponseLoggedInStatusEnum[keyof typeof ApiV1AuthCheckLoginStatusPost200ResponseLoggedInStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthPhoneVerifyOtpPost200Response
 */
export interface ApiV1AuthPhoneVerifyOtpPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthPhoneVerifyOtpPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthPhoneVerifyOtpPost200Response
     */
    'reason': ApiV1AuthPhoneVerifyOtpPost200ResponseReasonEnum;
}

export const ApiV1AuthPhoneVerifyOtpPost200ResponseReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user'
} as const;

export type ApiV1AuthPhoneVerifyOtpPost200ResponseReasonEnum = typeof ApiV1AuthPhoneVerifyOtpPost200ResponseReasonEnum[keyof typeof ApiV1AuthPhoneVerifyOtpPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf
 */
export interface ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1
 */
export interface ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1
     */
    'reason': ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1ReasonEnum = {
    ExpiredCode: 'expired_code',
    WrongGuess: 'wrong_guess',
    TooManyWrongGuess: 'too_many_wrong_guess',
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user'
} as const;

export type ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1ReasonEnum = typeof ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthPhoneVerifyOtpPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthPhoneVerifyOtpPostRequest
 */
export interface ApiV1AuthPhoneVerifyOtpPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthPhoneVerifyOtpPostRequest
     */
    'code': number;
    /**
     * Phone number
     * @type {string}
     * @memberof ApiV1AuthPhoneVerifyOtpPostRequest
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthPhoneVerifyOtpPostRequest
     */
    'defaultCallingCode': ApiV1AuthPhoneVerifyOtpPostRequestDefaultCallingCodeEnum;
}

export const ApiV1AuthPhoneVerifyOtpPostRequestDefaultCallingCodeEnum = {
    _297: '297',
    _5993: '5993',
    _1: '1',
    _299: '299',
    _590: '590',
    _596: '596',
    _599: '599',
    _5902: '590',
    _5903: '590',
    _508: '508',
    _1721: '1721',
    _12: '1',
    _1284: '1284',
    _1340: '1340',
    _374: '374',
    _995: '995',
    _972: '972',
    _81: '81',
    _82: '82',
    _65: '65',
    _886: '886',
    _35818: '35818',
    _355: '355',
    _376: '376',
    _43: '43',
    _375: '375',
    _32: '32',
    _387: '387',
    _359: '359',
    _385: '385',
    _420: '420',
    _45: '45',
    _372: '372',
    _298: '298',
    _358: '358',
    _33: '33',
    _49: '49',
    _350: '350',
    _30: '30',
    _441481: '441481',
    _3906698: '3906698',
    _36: '36',
    _354: '354',
    _353: '353',
    _441624: '441624',
    _39: '39',
    _441534: '441534',
    _383: '383',
    _371: '371',
    _423: '423',
    _370: '370',
    _352: '352',
    _356: '356',
    _373: '373',
    _377: '377',
    _382: '382',
    _31: '31',
    _389: '389',
    _47: '47',
    _48: '48',
    _351: '351',
    _40: '40',
    _378: '378',
    _381: '381',
    _421: '421',
    _386: '386',
    _34: '34',
    _4779: '4779',
    _46: '46',
    _41: '41',
    _90: '90',
    _380: '380',
    _44: '44',
    _38: '38',
    _262: '262',
    _1684: '1684',
    _61: '61',
    _5999: '5999',
    _689: '689',
    _687: '687',
    _64: '64'
} as const;

export type ApiV1AuthPhoneVerifyOtpPostRequestDefaultCallingCodeEnum = typeof ApiV1AuthPhoneVerifyOtpPostRequestDefaultCallingCodeEnum[keyof typeof ApiV1AuthPhoneVerifyOtpPostRequestDefaultCallingCodeEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthZkpGenerateVerificationLinkPost200Response
 */
export interface ApiV1AuthZkpGenerateVerificationLinkPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200Response
     */
    'verificationLink': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200Response
     */
    'reason': ApiV1AuthZkpGenerateVerificationLinkPost200ResponseReasonEnum;
}

export const ApiV1AuthZkpGenerateVerificationLinkPost200ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user'
} as const;

export type ApiV1AuthZkpGenerateVerificationLinkPost200ResponseReasonEnum = typeof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseReasonEnum[keyof typeof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf
 */
export interface ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf
     */
    'verificationLink': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1
 */
export interface ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1
     */
    'reason': ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1ReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user'
} as const;

export type ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1ReasonEnum = typeof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1AuthZkpGenerateVerificationLinkPost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response
 */
export interface ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response
     */
    'rarimoStatus': ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseRarimoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response
     */
    'reason': ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseReasonEnum;
}

export const ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseRarimoStatusEnum = {
    NotVerified: 'not_verified',
    Verified: 'verified',
    FailedVerification: 'failed_verification',
    UniquenessCheckFailed: 'uniqueness_check_failed'
} as const;

export type ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseRarimoStatusEnum = typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseRarimoStatusEnum[keyof typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseRarimoStatusEnum];
export const ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseReasonEnum = {
    AlreadyLoggedIn: 'already_logged_in',
    AssociatedWithAnotherUser: 'associated_with_another_user'
} as const;

export type ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseReasonEnum = typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseReasonEnum[keyof typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOf
 */
export interface ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOf
     */
    'rarimoStatus': ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOfRarimoStatusEnum;
}

export const ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOfRarimoStatusEnum = {
    NotVerified: 'not_verified',
    Verified: 'verified',
    FailedVerification: 'failed_verification',
    UniquenessCheckFailed: 'uniqueness_check_failed'
} as const;

export type ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOfRarimoStatusEnum = typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOfRarimoStatusEnum[keyof typeof ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200ResponseAnyOfRarimoStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1ConversationCreatePost200Response
 */
export interface ApiV1ConversationCreatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationCreatePost200Response
     */
    'conversationSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationCreatePostRequest
 */
export interface ApiV1ConversationCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'conversationTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'conversationBody'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'postAsOrganization'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'indexConversationAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'isIndexed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'isLoginRequired': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ConversationCreatePostRequest
     */
    'pollingOptionList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200Response
 */
export interface ApiV1ConversationFetchRecentPost200Response {
    /**
     * 
     * @type {Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner>}
     * @memberof ApiV1ConversationFetchRecentPost200Response
     */
    'conversationDataList': Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationFetchRecentPost200Response
     */
    'reachedEndOfFeed': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner {
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner
     */
    'metadata': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata;
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner
     */
    'payload': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload;
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner
     */
    'interaction': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction;
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner
     */
    'polis': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction
     */
    'hasVoted': boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerInteraction
     */
    'votedIndex': number;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'lastReactedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'opinionCount': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'voteCount': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'participantCount': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'authorUsername': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'isLoginRequired': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'isIndexed': boolean;
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'organization'?: ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization;
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadata
     */
    'moderation': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'status': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'action': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'reason': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'explanation': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration
     */
    'updatedAt': string;
}

export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationStatusEnum = {
    Unmoderated: 'unmoderated'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationStatusEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationStatusEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationStatusEnum];
export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationActionEnum = {
    Lock: 'lock'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationActionEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationActionEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationActionEnum];
export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationReasonEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationReasonEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'status': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'action': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'reason': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'explanation': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf
     */
    'updatedAt': string;
}

export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfStatusEnum = {
    Moderated: 'moderated'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfStatusEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfStatusEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfStatusEnum];
export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfActionEnum = {
    Lock: 'lock'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfActionEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfActionEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfActionEnum];
export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfReasonEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfReasonEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1
     */
    'status': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1StatusEnum;
}

export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1StatusEnum = {
    Unmoderated: 'unmoderated'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1StatusEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1StatusEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModerationAnyOf1StatusEnum];

/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization
     */
    'imageUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization
     */
    'websiteUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataOrganization
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload
     */
    'body'?: string;
    /**
     * 
     * @type {Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner>}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayload
     */
    'poll'?: Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner {
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner
     */
    'optionNumber': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner
     */
    'optionTitle': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPayloadPollInner
     */
    'numResponses': number;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis
     */
    'aiSummary'?: string;
    /**
     * 
     * @type {Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner>}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolis
     */
    'clusters': Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
 */
export interface ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
     */
    'key': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInnerKeyEnum;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
     */
    'numUsers': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
     */
    'aiLabel'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
     */
    'aiSummary'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInner
     */
    'isUserInCluster': boolean;
}

export const ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInnerKeyEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5'
} as const;

export type ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInnerKeyEnum = typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInnerKeyEnum[keyof typeof ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerPolisClustersInnerKeyEnum];

/**
 * 
 * @export
 * @interface ApiV1ConversationFetchRecentPostRequest
 */
export interface ApiV1ConversationFetchRecentPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ConversationFetchRecentPostRequest
     */
    'lastSlugId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ConversationGetPost200Response
 */
export interface ApiV1ConversationGetPost200Response {
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner}
     * @memberof ApiV1ConversationGetPost200Response
     */
    'conversationData': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner;
}
/**
 * 
 * @export
 * @interface ApiV1ModerationConversationCreatePostRequest
 */
export interface ApiV1ModerationConversationCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationConversationCreatePostRequest
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationConversationCreatePostRequest
     */
    'moderationReason': ApiV1ModerationConversationCreatePostRequestModerationReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationConversationCreatePostRequest
     */
    'moderationAction': ApiV1ModerationConversationCreatePostRequestModerationActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationConversationCreatePostRequest
     */
    'moderationExplanation': string;
}

export const ApiV1ModerationConversationCreatePostRequestModerationReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ModerationConversationCreatePostRequestModerationReasonEnum = typeof ApiV1ModerationConversationCreatePostRequestModerationReasonEnum[keyof typeof ApiV1ModerationConversationCreatePostRequestModerationReasonEnum];
export const ApiV1ModerationConversationCreatePostRequestModerationActionEnum = {
    Lock: 'lock'
} as const;

export type ApiV1ModerationConversationCreatePostRequestModerationActionEnum = typeof ApiV1ModerationConversationCreatePostRequestModerationActionEnum[keyof typeof ApiV1ModerationConversationCreatePostRequestModerationActionEnum];

/**
 * 
 * @export
 * @interface ApiV1ModerationConversationWithdrawPostRequest
 */
export interface ApiV1ModerationConversationWithdrawPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationConversationWithdrawPostRequest
     */
    'conversationSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1ModerationOpinionCreatePostRequest
 */
export interface ApiV1ModerationOpinionCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionCreatePostRequest
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionCreatePostRequest
     */
    'moderationReason': ApiV1ModerationOpinionCreatePostRequestModerationReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionCreatePostRequest
     */
    'moderationAction': ApiV1ModerationOpinionCreatePostRequestModerationActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionCreatePostRequest
     */
    'moderationExplanation': string;
}

export const ApiV1ModerationOpinionCreatePostRequestModerationReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ModerationOpinionCreatePostRequestModerationReasonEnum = typeof ApiV1ModerationOpinionCreatePostRequestModerationReasonEnum[keyof typeof ApiV1ModerationOpinionCreatePostRequestModerationReasonEnum];
export const ApiV1ModerationOpinionCreatePostRequestModerationActionEnum = {
    Move: 'move',
    Hide: 'hide'
} as const;

export type ApiV1ModerationOpinionCreatePostRequestModerationActionEnum = typeof ApiV1ModerationOpinionCreatePostRequestModerationActionEnum[keyof typeof ApiV1ModerationOpinionCreatePostRequestModerationActionEnum];

/**
 * 
 * @export
 * @interface ApiV1ModerationOpinionGetPost200Response
 */
export interface ApiV1ModerationOpinionGetPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'status': ApiV1ModerationOpinionGetPost200ResponseStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'action': ApiV1ModerationOpinionGetPost200ResponseActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'reason': ApiV1ModerationOpinionGetPost200ResponseReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'explanation': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200Response
     */
    'updatedAt': string;
}

export const ApiV1ModerationOpinionGetPost200ResponseStatusEnum = {
    Unmoderated: 'unmoderated'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseStatusEnum = typeof ApiV1ModerationOpinionGetPost200ResponseStatusEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseStatusEnum];
export const ApiV1ModerationOpinionGetPost200ResponseActionEnum = {
    Move: 'move',
    Hide: 'hide'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseActionEnum = typeof ApiV1ModerationOpinionGetPost200ResponseActionEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseActionEnum];
export const ApiV1ModerationOpinionGetPost200ResponseReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseReasonEnum = typeof ApiV1ModerationOpinionGetPost200ResponseReasonEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ModerationOpinionGetPost200ResponseAnyOf
 */
export interface ApiV1ModerationOpinionGetPost200ResponseAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'status': ApiV1ModerationOpinionGetPost200ResponseAnyOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'action': ApiV1ModerationOpinionGetPost200ResponseAnyOfActionEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'reason': ApiV1ModerationOpinionGetPost200ResponseAnyOfReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'explanation': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionGetPost200ResponseAnyOf
     */
    'updatedAt': string;
}

export const ApiV1ModerationOpinionGetPost200ResponseAnyOfStatusEnum = {
    Moderated: 'moderated'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseAnyOfStatusEnum = typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfStatusEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfStatusEnum];
export const ApiV1ModerationOpinionGetPost200ResponseAnyOfActionEnum = {
    Move: 'move',
    Hide: 'hide'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseAnyOfActionEnum = typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfActionEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfActionEnum];
export const ApiV1ModerationOpinionGetPost200ResponseAnyOfReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ModerationOpinionGetPost200ResponseAnyOfReasonEnum = typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfReasonEnum[keyof typeof ApiV1ModerationOpinionGetPost200ResponseAnyOfReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ModerationOpinionWithdrawPostRequest
 */
export interface ApiV1ModerationOpinionWithdrawPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ModerationOpinionWithdrawPostRequest
     */
    'opinionSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1MuteUserCreatePostRequest
 */
export interface ApiV1MuteUserCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1MuteUserCreatePostRequest
     */
    'targetUsername': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1MuteUserCreatePostRequest
     */
    'action': ApiV1MuteUserCreatePostRequestActionEnum;
}

export const ApiV1MuteUserCreatePostRequestActionEnum = {
    Mute: 'mute',
    Unmute: 'unmute'
} as const;

export type ApiV1MuteUserCreatePostRequestActionEnum = typeof ApiV1MuteUserCreatePostRequestActionEnum[keyof typeof ApiV1MuteUserCreatePostRequestActionEnum];

/**
 * 
 * @export
 * @interface ApiV1MuteUserGetPost200ResponseInner
 */
export interface ApiV1MuteUserGetPost200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1MuteUserGetPost200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1MuteUserGetPost200ResponseInner
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiV1NotificationFetchPost200Response
 */
export interface ApiV1NotificationFetchPost200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1NotificationFetchPost200Response
     */
    'numNewNotifications': number;
    /**
     * 
     * @type {Array<ApiV1NotificationFetchPost200ResponseNotificationListInner>}
     * @memberof ApiV1NotificationFetchPost200Response
     */
    'notificationList': Array<ApiV1NotificationFetchPost200ResponseNotificationListInner>;
}
/**
 * 
 * @export
 * @interface ApiV1NotificationFetchPost200ResponseNotificationListInner
 */
export interface ApiV1NotificationFetchPost200ResponseNotificationListInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'type': ApiV1NotificationFetchPost200ResponseNotificationListInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'slugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'isRead': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'createdAt': string;
    /**
     * 
     * @type {ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'routeTarget': ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget;
    /**
     * 
     * @type {number}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'numVotes': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInner
     */
    'username': string;
}

export const ApiV1NotificationFetchPost200ResponseNotificationListInnerTypeEnum = {
    OpinionVote: 'opinion_vote',
    NewOpinion: 'new_opinion'
} as const;

export type ApiV1NotificationFetchPost200ResponseNotificationListInnerTypeEnum = typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerTypeEnum[keyof typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
 */
export interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'type': ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'slugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'isRead': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'createdAt': string;
    /**
     * 
     * @type {ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'routeTarget': ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget;
    /**
     * 
     * @type {number}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf
     */
    'numVotes': number;
}

export const ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfTypeEnum = {
    OpinionVote: 'opinion_vote'
} as const;

export type ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfTypeEnum = typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfTypeEnum[keyof typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
 */
export interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'type': ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'slugId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'isRead': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'createdAt': string;
    /**
     * 
     * @type {ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'routeTarget': ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1
     */
    'username': string;
}

export const ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1TypeEnum = {
    NewOpinion: 'new_opinion'
} as const;

export type ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1TypeEnum = typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1TypeEnum[keyof typeof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget
 */
export interface ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget {
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1NotificationFetchPost200ResponseNotificationListInnerAnyOfRouteTarget
     */
    'opinionSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1OpinionCreatePost200Response
 */
export interface ApiV1OpinionCreatePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OpinionCreatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePost200Response
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePost200Response
     */
    'reason': ApiV1OpinionCreatePost200ResponseReasonEnum;
}

export const ApiV1OpinionCreatePost200ResponseReasonEnum = {
    ConversationLocked: 'conversation_locked'
} as const;

export type ApiV1OpinionCreatePost200ResponseReasonEnum = typeof ApiV1OpinionCreatePost200ResponseReasonEnum[keyof typeof ApiV1OpinionCreatePost200ResponseReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1OpinionCreatePost200ResponseAnyOf
 */
export interface ApiV1OpinionCreatePost200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OpinionCreatePost200ResponseAnyOf
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePost200ResponseAnyOf
     */
    'opinionSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1OpinionCreatePost200ResponseAnyOf1
 */
export interface ApiV1OpinionCreatePost200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OpinionCreatePost200ResponseAnyOf1
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePost200ResponseAnyOf1
     */
    'reason': ApiV1OpinionCreatePost200ResponseAnyOf1ReasonEnum;
}

export const ApiV1OpinionCreatePost200ResponseAnyOf1ReasonEnum = {
    ConversationLocked: 'conversation_locked'
} as const;

export type ApiV1OpinionCreatePost200ResponseAnyOf1ReasonEnum = typeof ApiV1OpinionCreatePost200ResponseAnyOf1ReasonEnum[keyof typeof ApiV1OpinionCreatePost200ResponseAnyOf1ReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1OpinionCreatePostRequest
 */
export interface ApiV1OpinionCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePostRequest
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionCreatePostRequest
     */
    'opinionBody': string;
}
/**
 * 
 * @export
 * @interface ApiV1OpinionFetchByConversationPostRequest
 */
export interface ApiV1OpinionFetchByConversationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionFetchByConversationPostRequest
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionFetchByConversationPostRequest
     */
    'filter': ApiV1OpinionFetchByConversationPostRequestFilterEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionFetchByConversationPostRequest
     */
    'clusterKey'?: ApiV1OpinionFetchByConversationPostRequestClusterKeyEnum;
}

export const ApiV1OpinionFetchByConversationPostRequestFilterEnum = {
    Moderated: 'moderated',
    New: 'new',
    Discover: 'discover',
    Cluster: 'cluster',
    Hidden: 'hidden'
} as const;

export type ApiV1OpinionFetchByConversationPostRequestFilterEnum = typeof ApiV1OpinionFetchByConversationPostRequestFilterEnum[keyof typeof ApiV1OpinionFetchByConversationPostRequestFilterEnum];
export const ApiV1OpinionFetchByConversationPostRequestClusterKeyEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5'
} as const;

export type ApiV1OpinionFetchByConversationPostRequestClusterKeyEnum = typeof ApiV1OpinionFetchByConversationPostRequestClusterKeyEnum[keyof typeof ApiV1OpinionFetchByConversationPostRequestClusterKeyEnum];

/**
 * 
 * @export
 * @interface ApiV1OpinionFetchBySlugIdListPostRequest
 */
export interface ApiV1OpinionFetchBySlugIdListPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OpinionFetchBySlugIdListPostRequest
     */
    'opinionSlugIdList': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1OpinionFetchHiddenByConversationPostRequest
 */
export interface ApiV1OpinionFetchHiddenByConversationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionFetchHiddenByConversationPostRequest
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OpinionFetchHiddenByConversationPostRequest
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PollRespondPostRequest
 */
export interface ApiV1PollRespondPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1PollRespondPostRequest
     */
    'voteOptionChoice': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PollRespondPostRequest
     */
    'conversationSlugId': string;
}
/**
 * 
 * @export
 * @interface ApiV1ReportConversationCreatePostRequest
 */
export interface ApiV1ReportConversationCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationCreatePostRequest
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationCreatePostRequest
     */
    'reportReason': ApiV1ReportConversationCreatePostRequestReportReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationCreatePostRequest
     */
    'reportExplanation'?: string;
}

export const ApiV1ReportConversationCreatePostRequestReportReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ReportConversationCreatePostRequestReportReasonEnum = typeof ApiV1ReportConversationCreatePostRequestReportReasonEnum[keyof typeof ApiV1ReportConversationCreatePostRequestReportReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ReportConversationFetchPost200ResponseInner
 */
export interface ApiV1ReportConversationFetchPost200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationFetchPost200ResponseInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationFetchPost200ResponseInner
     */
    'reason': ApiV1ReportConversationFetchPost200ResponseInnerReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationFetchPost200ResponseInner
     */
    'explanation'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportConversationFetchPost200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ReportConversationFetchPost200ResponseInner
     */
    'id': number;
}

export const ApiV1ReportConversationFetchPost200ResponseInnerReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ReportConversationFetchPost200ResponseInnerReasonEnum = typeof ApiV1ReportConversationFetchPost200ResponseInnerReasonEnum[keyof typeof ApiV1ReportConversationFetchPost200ResponseInnerReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1ReportOpinionCreatePostRequest
 */
export interface ApiV1ReportOpinionCreatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportOpinionCreatePostRequest
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportOpinionCreatePostRequest
     */
    'reportReason': ApiV1ReportOpinionCreatePostRequestReportReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReportOpinionCreatePostRequest
     */
    'reportExplanation'?: string;
}

export const ApiV1ReportOpinionCreatePostRequestReportReasonEnum = {
    Misleading: 'misleading',
    Antisocial: 'antisocial',
    Illegal: 'illegal',
    Doxing: 'doxing',
    Sexual: 'sexual',
    Spam: 'spam'
} as const;

export type ApiV1ReportOpinionCreatePostRequestReportReasonEnum = typeof ApiV1ReportOpinionCreatePostRequestReportReasonEnum[keyof typeof ApiV1ReportOpinionCreatePostRequestReportReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1UserConversationFetchPostRequest
 */
export interface ApiV1UserConversationFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserConversationFetchPostRequest
     */
    'lastConversationSlugId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1UserOpinionFetchPost200ResponseInner
 */
export interface ApiV1UserOpinionFetchPost200ResponseInner {
    /**
     * 
     * @type {ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInner
     */
    'conversationData': ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner;
    /**
     * 
     * @type {ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInner
     */
    'opinionItem': ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem;
}
/**
 * 
 * @export
 * @interface ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
 */
export interface ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'opinion': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'numParticipants': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'numAgrees': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'numDisagrees': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'username': string;
    /**
     * 
     * @type {Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner>}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'clustersStats': Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner>;
    /**
     * 
     * @type {ApiV1ModerationOpinionGetPost200Response}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem
     */
    'moderation': ApiV1ModerationOpinionGetPost200Response;
}
/**
 * 
 * @export
 * @interface ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
 */
export interface ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'key': ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInnerKeyEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'aiLabel'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'isAuthorInCluster': boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'numUsers': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'numAgrees': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInner
     */
    'numDisagrees': number;
}

export const ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInnerKeyEnum = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5'
} as const;

export type ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInnerKeyEnum = typeof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInnerKeyEnum[keyof typeof ApiV1UserOpinionFetchPost200ResponseInnerOpinionItemClustersStatsInnerKeyEnum];

/**
 * 
 * @export
 * @interface ApiV1UserOpinionFetchPostRequest
 */
export interface ApiV1UserOpinionFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserOpinionFetchPostRequest
     */
    'lastOpinionSlugId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1UserPollGetResponseByConversationsPost200ResponseInner
 */
export interface ApiV1UserPollGetResponseByConversationsPost200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserPollGetResponseByConversationsPost200ResponseInner
     */
    'conversationSlugId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserPollGetResponseByConversationsPost200ResponseInner
     */
    'optionChosen': number;
}
/**
 * 
 * @export
 * @interface ApiV1UserProfileGetPost200Response
 */
export interface ApiV1UserProfileGetPost200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserProfileGetPost200Response
     */
    'activePostCount': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserProfileGetPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserProfileGetPost200Response
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserProfileGetPost200Response
     */
    'isModerator': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserProfileGetPost200Response
     */
    'organizationList': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1UserUsernameUpdatePostRequest
 */
export interface ApiV1UserUsernameUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserUsernameUpdatePostRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserVoteGetByConversationsPost200ResponseInner
 */
export interface ApiV1UserVoteGetByConversationsPost200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserVoteGetByConversationsPost200ResponseInner
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserVoteGetByConversationsPost200ResponseInner
     */
    'votingAction': ApiV1UserVoteGetByConversationsPost200ResponseInnerVotingActionEnum;
}

export const ApiV1UserVoteGetByConversationsPost200ResponseInnerVotingActionEnum = {
    Agree: 'agree',
    Disagree: 'disagree'
} as const;

export type ApiV1UserVoteGetByConversationsPost200ResponseInnerVotingActionEnum = typeof ApiV1UserVoteGetByConversationsPost200ResponseInnerVotingActionEnum[keyof typeof ApiV1UserVoteGetByConversationsPost200ResponseInnerVotingActionEnum];

/**
 * 
 * @export
 * @interface ApiV1UserVoteGetByConversationsPostRequest
 */
export interface ApiV1UserVoteGetByConversationsPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserVoteGetByConversationsPostRequest
     */
    'conversationSlugIdList': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1VoteCastPostRequest
 */
export interface ApiV1VoteCastPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1VoteCastPostRequest
     */
    'opinionSlugId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1VoteCastPostRequest
     */
    'chosenOption': ApiV1VoteCastPostRequestChosenOptionEnum;
}

export const ApiV1VoteCastPostRequestChosenOptionEnum = {
    Agree: 'agree',
    Disagree: 'disagree',
    Cancel: 'cancel'
} as const;

export type ApiV1VoteCastPostRequestChosenOptionEnum = typeof ApiV1VoteCastPostRequestChosenOptionEnum[keyof typeof ApiV1VoteCastPostRequestChosenOptionEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountGenerateUnusedRandomUsernamePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account/generate-unused-random-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountIsUsernameInUsePost: async (apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserUsernameUpdatePostRequest' is not null or undefined
            assertParamExists('apiV1AccountIsUsernameInUsePost', 'apiV1UserUsernameUpdatePostRequest', apiV1UserUsernameUpdatePostRequest)
            const localVarPath = `/api/v1/account/is-username-in-use`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserUsernameUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationAddUserOrganizationMappingPost: async (apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest' is not null or undefined
            assertParamExists('apiV1AdministratorOrganizationAddUserOrganizationMappingPost', 'apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest', apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest)
            const localVarPath = `/api/v1/administrator/organization/add-user-organization-mapping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationCreateOrganizationPostRequest} apiV1AdministratorOrganizationCreateOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationCreateOrganizationPost: async (apiV1AdministratorOrganizationCreateOrganizationPostRequest: ApiV1AdministratorOrganizationCreateOrganizationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdministratorOrganizationCreateOrganizationPostRequest' is not null or undefined
            assertParamExists('apiV1AdministratorOrganizationCreateOrganizationPost', 'apiV1AdministratorOrganizationCreateOrganizationPostRequest', apiV1AdministratorOrganizationCreateOrganizationPostRequest)
            const localVarPath = `/api/v1/administrator/organization/create-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdministratorOrganizationCreateOrganizationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationDeleteOrganizationPostRequest} apiV1AdministratorOrganizationDeleteOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationDeleteOrganizationPost: async (apiV1AdministratorOrganizationDeleteOrganizationPostRequest: ApiV1AdministratorOrganizationDeleteOrganizationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdministratorOrganizationDeleteOrganizationPostRequest' is not null or undefined
            assertParamExists('apiV1AdministratorOrganizationDeleteOrganizationPost', 'apiV1AdministratorOrganizationDeleteOrganizationPostRequest', apiV1AdministratorOrganizationDeleteOrganizationPostRequest)
            const localVarPath = `/api/v1/administrator/organization/delete-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdministratorOrganizationDeleteOrganizationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationGetAllOrganizationsPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/administrator/organization/get-all-organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost: async (apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserUsernameUpdatePostRequest' is not null or undefined
            assertParamExists('apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost', 'apiV1UserUsernameUpdatePostRequest', apiV1UserUsernameUpdatePostRequest)
            const localVarPath = `/api/v1/administrator/organization/get-organization-names-by-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserUsernameUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost: async (apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest' is not null or undefined
            assertParamExists('apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost', 'apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest', apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest)
            const localVarPath = `/api/v1/administrator/organization/remove-user-organization-mapping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost: async (apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthAuthenticatePostRequest' is not null or undefined
            assertParamExists('apiV1AuthAuthenticatePost', 'apiV1AuthAuthenticatePostRequest', apiV1AuthAuthenticatePostRequest)
            const localVarPath = `/api/v1/auth/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAuthenticatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckLoginStatusPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/check-login-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AuthPhoneVerifyOtpPostRequest} apiV1AuthPhoneVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneVerifyOtpPost: async (apiV1AuthPhoneVerifyOtpPostRequest: ApiV1AuthPhoneVerifyOtpPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthPhoneVerifyOtpPostRequest' is not null or undefined
            assertParamExists('apiV1AuthPhoneVerifyOtpPost', 'apiV1AuthPhoneVerifyOtpPostRequest', apiV1AuthPhoneVerifyOtpPostRequest)
            const localVarPath = `/api/v1/auth/phone/verify-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthPhoneVerifyOtpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthZkpGenerateVerificationLinkPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/zkp/generate-verification-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthZkpVerifyUserStatusAndAuthenticatePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/zkp/verify-user-status-and-authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ConversationCreatePostRequest} apiV1ConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationCreatePost: async (apiV1ConversationCreatePostRequest: ApiV1ConversationCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ConversationCreatePostRequest' is not null or undefined
            assertParamExists('apiV1ConversationCreatePost', 'apiV1ConversationCreatePostRequest', apiV1ConversationCreatePostRequest)
            const localVarPath = `/api/v1/conversation/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ConversationCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationDeletePost: async (apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ConversationDeletePost', 'apiV1ModerationConversationWithdrawPostRequest', apiV1ModerationConversationWithdrawPostRequest)
            const localVarPath = `/api/v1/conversation/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationFetchRecentPost: async (apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/conversation/fetch-recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ConversationFetchRecentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationGetPost: async (apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ConversationGetPost', 'apiV1ModerationConversationWithdrawPostRequest', apiV1ModerationConversationWithdrawPostRequest)
            const localVarPath = `/api/v1/conversation/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationCreatePostRequest} apiV1ModerationConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationCreatePost: async (apiV1ModerationConversationCreatePostRequest: ApiV1ModerationConversationCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationCreatePostRequest' is not null or undefined
            assertParamExists('apiV1ModerationConversationCreatePost', 'apiV1ModerationConversationCreatePostRequest', apiV1ModerationConversationCreatePostRequest)
            const localVarPath = `/api/v1/moderation/conversation/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationGetPost: async (apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationConversationGetPost', 'apiV1ModerationConversationWithdrawPostRequest', apiV1ModerationConversationWithdrawPostRequest)
            const localVarPath = `/api/v1/moderation/conversation/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationWithdrawPost: async (apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationConversationWithdrawPost', 'apiV1ModerationConversationWithdrawPostRequest', apiV1ModerationConversationWithdrawPostRequest)
            const localVarPath = `/api/v1/moderation/conversation/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionCreatePostRequest} apiV1ModerationOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionCreatePost: async (apiV1ModerationOpinionCreatePostRequest: ApiV1ModerationOpinionCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationOpinionCreatePostRequest' is not null or undefined
            assertParamExists('apiV1ModerationOpinionCreatePost', 'apiV1ModerationOpinionCreatePostRequest', apiV1ModerationOpinionCreatePostRequest)
            const localVarPath = `/api/v1/moderation/opinion/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationOpinionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionGetPost: async (apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationOpinionWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationOpinionGetPost', 'apiV1ModerationOpinionWithdrawPostRequest', apiV1ModerationOpinionWithdrawPostRequest)
            const localVarPath = `/api/v1/moderation/opinion/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationOpinionWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionWithdrawPost: async (apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationOpinionWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ModerationOpinionWithdrawPost', 'apiV1ModerationOpinionWithdrawPostRequest', apiV1ModerationOpinionWithdrawPostRequest)
            const localVarPath = `/api/v1/moderation/opinion/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationOpinionWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1MuteUserCreatePostRequest} apiV1MuteUserCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MuteUserCreatePost: async (apiV1MuteUserCreatePostRequest: ApiV1MuteUserCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1MuteUserCreatePostRequest' is not null or undefined
            assertParamExists('apiV1MuteUserCreatePost', 'apiV1MuteUserCreatePostRequest', apiV1MuteUserCreatePostRequest)
            const localVarPath = `/api/v1/mute/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1MuteUserCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MuteUserGetPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/mute/user/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationFetchPost: async (apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notification/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ConversationFetchRecentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationMarkAllReadPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notification/mark-all-read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1OpinionCreatePostRequest} apiV1OpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionCreatePost: async (apiV1OpinionCreatePostRequest: ApiV1OpinionCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OpinionCreatePostRequest' is not null or undefined
            assertParamExists('apiV1OpinionCreatePost', 'apiV1OpinionCreatePostRequest', apiV1OpinionCreatePostRequest)
            const localVarPath = `/api/v1/opinion/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OpinionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionDeletePost: async (apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationOpinionWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1OpinionDeletePost', 'apiV1ModerationOpinionWithdrawPostRequest', apiV1ModerationOpinionWithdrawPostRequest)
            const localVarPath = `/api/v1/opinion/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationOpinionWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1OpinionFetchByConversationPostRequest} apiV1OpinionFetchByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchByConversationPost: async (apiV1OpinionFetchByConversationPostRequest: ApiV1OpinionFetchByConversationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OpinionFetchByConversationPostRequest' is not null or undefined
            assertParamExists('apiV1OpinionFetchByConversationPost', 'apiV1OpinionFetchByConversationPostRequest', apiV1OpinionFetchByConversationPostRequest)
            const localVarPath = `/api/v1/opinion/fetch-by-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OpinionFetchByConversationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1OpinionFetchBySlugIdListPostRequest} apiV1OpinionFetchBySlugIdListPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchBySlugIdListPost: async (apiV1OpinionFetchBySlugIdListPostRequest: ApiV1OpinionFetchBySlugIdListPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OpinionFetchBySlugIdListPostRequest' is not null or undefined
            assertParamExists('apiV1OpinionFetchBySlugIdListPost', 'apiV1OpinionFetchBySlugIdListPostRequest', apiV1OpinionFetchBySlugIdListPostRequest)
            const localVarPath = `/api/v1/opinion/fetch-by-slug-id-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OpinionFetchBySlugIdListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1OpinionFetchHiddenByConversationPostRequest} apiV1OpinionFetchHiddenByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchHiddenByConversationPost: async (apiV1OpinionFetchHiddenByConversationPostRequest: ApiV1OpinionFetchHiddenByConversationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1OpinionFetchHiddenByConversationPostRequest' is not null or undefined
            assertParamExists('apiV1OpinionFetchHiddenByConversationPost', 'apiV1OpinionFetchHiddenByConversationPostRequest', apiV1OpinionFetchHiddenByConversationPostRequest)
            const localVarPath = `/api/v1/opinion/fetch-hidden-by-conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OpinionFetchHiddenByConversationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollRespondPost: async (apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PollRespondPostRequest' is not null or undefined
            assertParamExists('apiV1PollRespondPost', 'apiV1PollRespondPostRequest', apiV1PollRespondPostRequest)
            const localVarPath = `/api/v1/poll/respond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PollRespondPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ReportConversationCreatePostRequest} apiV1ReportConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportConversationCreatePost: async (apiV1ReportConversationCreatePostRequest: ApiV1ReportConversationCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ReportConversationCreatePostRequest' is not null or undefined
            assertParamExists('apiV1ReportConversationCreatePost', 'apiV1ReportConversationCreatePostRequest', apiV1ReportConversationCreatePostRequest)
            const localVarPath = `/api/v1/report/conversation/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ReportConversationCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportConversationFetchPost: async (apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationConversationWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ReportConversationFetchPost', 'apiV1ModerationConversationWithdrawPostRequest', apiV1ModerationConversationWithdrawPostRequest)
            const localVarPath = `/api/v1/report/conversation/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationConversationWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ReportOpinionCreatePostRequest} apiV1ReportOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportOpinionCreatePost: async (apiV1ReportOpinionCreatePostRequest: ApiV1ReportOpinionCreatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ReportOpinionCreatePostRequest' is not null or undefined
            assertParamExists('apiV1ReportOpinionCreatePost', 'apiV1ReportOpinionCreatePostRequest', apiV1ReportOpinionCreatePostRequest)
            const localVarPath = `/api/v1/report/opinion/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ReportOpinionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportOpinionFetchPost: async (apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ModerationOpinionWithdrawPostRequest' is not null or undefined
            assertParamExists('apiV1ReportOpinionFetchPost', 'apiV1ModerationOpinionWithdrawPostRequest', apiV1ModerationOpinionWithdrawPostRequest)
            const localVarPath = `/api/v1/report/opinion/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ModerationOpinionWithdrawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserConversationFetchPostRequest} [apiV1UserConversationFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserConversationFetchPost: async (apiV1UserConversationFetchPostRequest?: ApiV1UserConversationFetchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/conversation/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserConversationFetchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserDeletePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserOpinionFetchPostRequest} [apiV1UserOpinionFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserOpinionFetchPost: async (apiV1UserOpinionFetchPostRequest?: ApiV1UserOpinionFetchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/opinion/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserOpinionFetchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPollGetResponseByConversationsPost: async (requestBody?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/poll/get-response-by-conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserProfileGetPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/profile/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUsernameUpdatePost: async (apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserUsernameUpdatePostRequest' is not null or undefined
            assertParamExists('apiV1UserUsernameUpdatePost', 'apiV1UserUsernameUpdatePostRequest', apiV1UserUsernameUpdatePostRequest)
            const localVarPath = `/api/v1/user/username/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserUsernameUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserVoteGetByConversationsPostRequest} apiV1UserVoteGetByConversationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVoteGetByConversationsPost: async (apiV1UserVoteGetByConversationsPostRequest: ApiV1UserVoteGetByConversationsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserVoteGetByConversationsPostRequest' is not null or undefined
            assertParamExists('apiV1UserVoteGetByConversationsPost', 'apiV1UserVoteGetByConversationsPostRequest', apiV1UserVoteGetByConversationsPostRequest)
            const localVarPath = `/api/v1/user/vote/get-by-conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserVoteGetByConversationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1VoteCastPostRequest} apiV1VoteCastPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteCastPost: async (apiV1VoteCastPostRequest: ApiV1VoteCastPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1VoteCastPostRequest' is not null or undefined
            assertParamExists('apiV1VoteCastPost', 'apiV1VoteCastPostRequest', apiV1VoteCastPostRequest)
            const localVarPath = `/api/v1/vote/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1VoteCastPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccountGenerateUnusedRandomUsernamePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccountGenerateUnusedRandomUsernamePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccountGenerateUnusedRandomUsernamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccountIsUsernameInUsePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationAddUserOrganizationMappingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationCreateOrganizationPostRequest} apiV1AdministratorOrganizationCreateOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest: ApiV1AdministratorOrganizationCreateOrganizationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationCreateOrganizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationDeleteOrganizationPostRequest} apiV1AdministratorOrganizationDeleteOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest: ApiV1AdministratorOrganizationDeleteOrganizationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationDeleteOrganizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationGetAllOrganizationsPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdministratorOrganizationGetAllOrganizationsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationGetAllOrganizationsPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationGetAllOrganizationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAuthenticatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthCheckLoginStatusPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthCheckLoginStatusPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthCheckLoginStatusPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthCheckLoginStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AuthPhoneVerifyOtpPostRequest} apiV1AuthPhoneVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest: ApiV1AuthPhoneVerifyOtpPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthPhoneVerifyOtpPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthPhoneVerifyOtpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthZkpGenerateVerificationLinkPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthZkpGenerateVerificationLinkPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthZkpGenerateVerificationLinkPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthZkpGenerateVerificationLinkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthZkpVerifyUserStatusAndAuthenticatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ConversationCreatePostRequest} apiV1ConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest: ApiV1ConversationCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ConversationCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ConversationCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ConversationDeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ConversationFetchRecentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ConversationFetchRecentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ConversationGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ConversationGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationCreatePostRequest} apiV1ModerationConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest: ApiV1ModerationConversationCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationConversationCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationConversationGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationConversationWithdrawPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionCreatePostRequest} apiV1ModerationOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest: ApiV1ModerationOpinionCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationOpinionCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ModerationOpinionGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationOpinionGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ModerationOpinionWithdrawPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1MuteUserCreatePostRequest} apiV1MuteUserCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest: ApiV1MuteUserCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1MuteUserCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MuteUserGetPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1MuteUserGetPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MuteUserGetPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1MuteUserGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1NotificationFetchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1NotificationFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1NotificationMarkAllReadPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1NotificationMarkAllReadPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1NotificationMarkAllReadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1OpinionCreatePostRequest} apiV1OpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest: ApiV1OpinionCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OpinionCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OpinionCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OpinionDeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1OpinionFetchByConversationPostRequest} apiV1OpinionFetchByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest: ApiV1OpinionFetchByConversationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OpinionFetchByConversationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1OpinionFetchBySlugIdListPostRequest} apiV1OpinionFetchBySlugIdListPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest: ApiV1OpinionFetchBySlugIdListPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OpinionFetchBySlugIdListPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1OpinionFetchHiddenByConversationPostRequest} apiV1OpinionFetchHiddenByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest: ApiV1OpinionFetchHiddenByConversationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OpinionFetchHiddenByConversationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PollRespondPost(apiV1PollRespondPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PollRespondPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ReportConversationCreatePostRequest} apiV1ReportConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest: ApiV1ReportConversationCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ReportConversationCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1ReportConversationFetchPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ReportConversationFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ReportOpinionCreatePostRequest} apiV1ReportOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest: ApiV1ReportOpinionCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ReportOpinionCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1ReportConversationFetchPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ReportOpinionFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserConversationFetchPostRequest} [apiV1UserConversationFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest?: ApiV1UserConversationFetchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserConversationFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserDeletePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserDeletePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserDeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserOpinionFetchPostRequest} [apiV1UserOpinionFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest?: ApiV1UserOpinionFetchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserOpinionFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPollGetResponseByConversationsPost(requestBody?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserPollGetResponseByConversationsPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPollGetResponseByConversationsPost(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserPollGetResponseByConversationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserProfileGetPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserProfileGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserProfileGetPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserProfileGetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserUsernameUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserVoteGetByConversationsPostRequest} apiV1UserVoteGetByConversationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest: ApiV1UserVoteGetByConversationsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1UserVoteGetByConversationsPost200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserVoteGetByConversationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1VoteCastPostRequest} apiV1VoteCastPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1VoteCastPost(apiV1VoteCastPostRequest: ApiV1VoteCastPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1VoteCastPost(apiV1VoteCastPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1VoteCastPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountGenerateUnusedRandomUsernamePost(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.apiV1AccountGenerateUnusedRandomUsernamePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationCreateOrganizationPostRequest} apiV1AdministratorOrganizationCreateOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest: ApiV1AdministratorOrganizationCreateOrganizationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationDeleteOrganizationPostRequest} apiV1AdministratorOrganizationDeleteOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest: ApiV1AdministratorOrganizationDeleteOrganizationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationGetAllOrganizationsPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdministratorOrganizationGetAllOrganizationsPost200Response> {
            return localVarFp.apiV1AdministratorOrganizationGetAllOrganizationsPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost200Response> {
            return localVarFp.apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAuthenticatePost200Response> {
            return localVarFp.apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckLoginStatusPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthCheckLoginStatusPost200Response> {
            return localVarFp.apiV1AuthCheckLoginStatusPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1AuthPhoneVerifyOtpPostRequest} apiV1AuthPhoneVerifyOtpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest: ApiV1AuthPhoneVerifyOtpPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthPhoneVerifyOtpPost200Response> {
            return localVarFp.apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthZkpGenerateVerificationLinkPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthZkpGenerateVerificationLinkPost200Response> {
            return localVarFp.apiV1AuthZkpGenerateVerificationLinkPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthZkpVerifyUserStatusAndAuthenticatePost200Response> {
            return localVarFp.apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ConversationCreatePostRequest} apiV1ConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest: ApiV1ConversationCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ConversationCreatePost200Response> {
            return localVarFp.apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ConversationFetchRecentPost200Response> {
            return localVarFp.apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ConversationGetPost200Response> {
            return localVarFp.apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationCreatePostRequest} apiV1ModerationConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest: ApiV1ModerationConversationCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInnerMetadataModeration> {
            return localVarFp.apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionCreatePostRequest} apiV1ModerationOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest: ApiV1ModerationOpinionCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ModerationOpinionGetPost200Response> {
            return localVarFp.apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1MuteUserCreatePostRequest} apiV1MuteUserCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest: ApiV1MuteUserCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MuteUserGetPost(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1MuteUserGetPost200ResponseInner>> {
            return localVarFp.apiV1MuteUserGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1NotificationFetchPost200Response> {
            return localVarFp.apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1NotificationMarkAllReadPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1NotificationMarkAllReadPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1OpinionCreatePostRequest} apiV1OpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest: ApiV1OpinionCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OpinionCreatePost200Response> {
            return localVarFp.apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1OpinionFetchByConversationPostRequest} apiV1OpinionFetchByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest: ApiV1OpinionFetchByConversationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>> {
            return localVarFp.apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1OpinionFetchBySlugIdListPostRequest} apiV1OpinionFetchBySlugIdListPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest: ApiV1OpinionFetchBySlugIdListPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>> {
            return localVarFp.apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1OpinionFetchHiddenByConversationPostRequest} apiV1OpinionFetchHiddenByConversationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest: ApiV1OpinionFetchHiddenByConversationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInnerOpinionItem>> {
            return localVarFp.apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1PollRespondPost(apiV1PollRespondPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ReportConversationCreatePostRequest} apiV1ReportConversationCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest: ApiV1ReportConversationCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1ReportConversationFetchPost200ResponseInner>> {
            return localVarFp.apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ReportOpinionCreatePostRequest} apiV1ReportOpinionCreatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest: ApiV1ReportOpinionCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1ReportConversationFetchPost200ResponseInner>> {
            return localVarFp.apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserConversationFetchPostRequest} [apiV1UserConversationFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest?: ApiV1UserConversationFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1ConversationFetchRecentPost200ResponseConversationDataListInner>> {
            return localVarFp.apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserDeletePost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1UserDeletePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserOpinionFetchPostRequest} [apiV1UserOpinionFetchPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest?: ApiV1UserOpinionFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserOpinionFetchPost200ResponseInner>> {
            return localVarFp.apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPollGetResponseByConversationsPost(requestBody?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserPollGetResponseByConversationsPost200ResponseInner>> {
            return localVarFp.apiV1UserPollGetResponseByConversationsPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserProfileGetPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserProfileGetPost200Response> {
            return localVarFp.apiV1UserProfileGetPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1UserVoteGetByConversationsPostRequest} apiV1UserVoteGetByConversationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest: ApiV1UserVoteGetByConversationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1UserVoteGetByConversationsPost200ResponseInner>> {
            return localVarFp.apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ApiV1VoteCastPostRequest} apiV1VoteCastPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1VoteCastPost(apiV1VoteCastPostRequest: ApiV1VoteCastPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiV1VoteCastPost(apiV1VoteCastPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccountGenerateUnusedRandomUsernamePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccountGenerateUnusedRandomUsernamePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccountIsUsernameInUsePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationAddUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AdministratorOrganizationCreateOrganizationPostRequest} apiV1AdministratorOrganizationCreateOrganizationPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest: ApiV1AdministratorOrganizationCreateOrganizationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationCreateOrganizationPost(apiV1AdministratorOrganizationCreateOrganizationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AdministratorOrganizationDeleteOrganizationPostRequest} apiV1AdministratorOrganizationDeleteOrganizationPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest: ApiV1AdministratorOrganizationDeleteOrganizationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationDeleteOrganizationPost(apiV1AdministratorOrganizationDeleteOrganizationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationGetAllOrganizationsPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationGetAllOrganizationsPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationGetOrganizationNamesByUsernamePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest} apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest: ApiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdministratorOrganizationRemoveUserOrganizationMappingPost(apiV1AdministratorOrganizationAddUserOrganizationMappingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AuthAuthenticatePostRequest} apiV1AuthAuthenticatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest: ApiV1AuthAuthenticatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAuthenticatePost(apiV1AuthAuthenticatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthCheckLoginStatusPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthCheckLoginStatusPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1AuthPhoneVerifyOtpPostRequest} apiV1AuthPhoneVerifyOtpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest: ApiV1AuthPhoneVerifyOtpPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthPhoneVerifyOtpPost(apiV1AuthPhoneVerifyOtpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthZkpGenerateVerificationLinkPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthZkpGenerateVerificationLinkPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthZkpVerifyUserStatusAndAuthenticatePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ConversationCreatePostRequest} apiV1ConversationCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest: ApiV1ConversationCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ConversationCreatePost(apiV1ConversationCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ConversationDeletePost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ConversationFetchRecentPost(apiV1ConversationFetchRecentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationCreatePostRequest} apiV1ModerationConversationCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest: ApiV1ModerationConversationCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationConversationCreatePost(apiV1ModerationConversationCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationConversationGetPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationConversationWithdrawPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationOpinionCreatePostRequest} apiV1ModerationOpinionCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest: ApiV1ModerationOpinionCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationOpinionCreatePost(apiV1ModerationOpinionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationOpinionGetPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ModerationOpinionWithdrawPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1MuteUserCreatePostRequest} apiV1MuteUserCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest: ApiV1MuteUserCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MuteUserCreatePost(apiV1MuteUserCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1MuteUserGetPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1MuteUserGetPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ConversationFetchRecentPostRequest} [apiV1ConversationFetchRecentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest?: ApiV1ConversationFetchRecentPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NotificationFetchPost(apiV1ConversationFetchRecentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1NotificationMarkAllReadPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1NotificationMarkAllReadPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1OpinionCreatePostRequest} apiV1OpinionCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest: ApiV1OpinionCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OpinionCreatePost(apiV1OpinionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OpinionDeletePost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1OpinionFetchByConversationPostRequest} apiV1OpinionFetchByConversationPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest: ApiV1OpinionFetchByConversationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OpinionFetchByConversationPost(apiV1OpinionFetchByConversationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1OpinionFetchBySlugIdListPostRequest} apiV1OpinionFetchBySlugIdListPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest: ApiV1OpinionFetchBySlugIdListPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OpinionFetchBySlugIdListPost(apiV1OpinionFetchBySlugIdListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1OpinionFetchHiddenByConversationPostRequest} apiV1OpinionFetchHiddenByConversationPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest: ApiV1OpinionFetchHiddenByConversationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OpinionFetchHiddenByConversationPost(apiV1OpinionFetchHiddenByConversationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1PollRespondPostRequest} apiV1PollRespondPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PollRespondPost(apiV1PollRespondPostRequest: ApiV1PollRespondPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PollRespondPost(apiV1PollRespondPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ReportConversationCreatePostRequest} apiV1ReportConversationCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest: ApiV1ReportConversationCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ReportConversationCreatePost(apiV1ReportConversationCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationConversationWithdrawPostRequest} apiV1ModerationConversationWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest: ApiV1ModerationConversationWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ReportConversationFetchPost(apiV1ModerationConversationWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ReportOpinionCreatePostRequest} apiV1ReportOpinionCreatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest: ApiV1ReportOpinionCreatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ReportOpinionCreatePost(apiV1ReportOpinionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1ModerationOpinionWithdrawPostRequest} apiV1ModerationOpinionWithdrawPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest: ApiV1ModerationOpinionWithdrawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ReportOpinionFetchPost(apiV1ModerationOpinionWithdrawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserConversationFetchPostRequest} [apiV1UserConversationFetchPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest?: ApiV1UserConversationFetchPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserConversationFetchPost(apiV1UserConversationFetchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserDeletePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserDeletePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserOpinionFetchPostRequest} [apiV1UserOpinionFetchPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest?: ApiV1UserOpinionFetchPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserOpinionFetchPost(apiV1UserOpinionFetchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserPollGetResponseByConversationsPost(requestBody?: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserPollGetResponseByConversationsPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserProfileGetPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserProfileGetPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserUsernameUpdatePostRequest} apiV1UserUsernameUpdatePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest: ApiV1UserUsernameUpdatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserUsernameUpdatePost(apiV1UserUsernameUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1UserVoteGetByConversationsPostRequest} apiV1UserVoteGetByConversationsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest: ApiV1UserVoteGetByConversationsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserVoteGetByConversationsPost(apiV1UserVoteGetByConversationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ApiV1VoteCastPostRequest} apiV1VoteCastPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1VoteCastPost(apiV1VoteCastPostRequest: ApiV1VoteCastPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1VoteCastPost(apiV1VoteCastPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



